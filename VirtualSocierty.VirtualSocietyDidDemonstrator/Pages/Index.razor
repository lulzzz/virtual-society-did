@using System.Net.Http
@using System.Net.Http.Formatting
@page "/"

<h1>Key Encapsulation Mechanisms</h1>
<p>
    Key encapsulation mechanisms (KEMs) are a class of encryption techniques designed to secure symmetric cryptographic key material for transmission
    using asymmetric (public-key) algorithms. In practice, public key systems are clumsy to use in transmitting long messages. Instead they are often
    used to exchange symmetric keys, which are relatively short. The symmetric key is then used to encrypt the longer message. The traditional approach
    to sending a symmetric key with public key systems is to first generate a random symmetric key and then encrypt it using the chosen public key algorithm.
    The recipient then decrypts the public key message to recover the symmetric key. As the symmetric key is generally short, padding is required for full
    security and proofs of security for padding schemes are often less than complete.[1] KEMs simplify the process by generating a random element in the
    finite group underlying the public key system and deriving the symmetric key by hashing that element, eliminating the need for padding.
</p>
<p>
    <strong>Please select a mechanism:</strong><br/>
    <MatAutocompleteList Items="@options" @bind-Value="@kem" Icon="vpn_key" TItem="string" Label="Pick one"></MatAutocompleteList> <MatButton Disabled="@disabled" @onclick="CreateQrCode">Create QR Code</MatButton>
</p>
@if (keyInfo != null)
{
    <p>
        Algorithm: @keyInfo.AlgorithmName <br />
        version: @keyInfo.AlgorithmVersion <br />
        CiphertextLength: @keyInfo.CiphertextLength <br />
        PublicKeyLength: @keyInfo.PublicKeyLength <br />
        SecretKeyLength: @keyInfo.SecretKeyLength <br />
        SharedSecretLength: @keyInfo.SharedSecretLength <br />
    </p>
}
<p>
</p>
<p>
    @Content
</p>
<pre>
@JsonContent
</pre>
@kem
@code {
    private MarkupString Content { get; set; }
    private string JsonContent { get; set; }
    private ICollection<string> options { get; set; }
    private KEM keyInfo { get; set; }
    private string _kem = string.Empty;
    private bool disabled = true;

    private string kem
    {
        get
        {
            return _kem;
        }
        set
        {
            disabled = false;
            _kem = value;
            SetKem(value);
        }
    }

    private async void SetKem(string value)
    {
        using (var Http = new HttpClient())
        {
            var client = new DidClient(Http);
            keyInfo = await client.KeyInfoAsync(value);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        using (var Http = new HttpClient())
        {
            var client = new DidClient(Http);
            options = new List<string>()
{
                "BabyBear",
                "BabyBearEphem",
                "MamaBear",
                "MamaBearEphem",
                "PapaBear",
                "PapaBearEphem",
            };
            StateHasChanged();
            //options = await client.GetKeyMechanismsAsync();
            //kem = "BabyBear";
        }
    }

    private async void CreateQrCode()
    {
        using (var Http = new HttpClient())
        {

            var client = new DidClient(Http);
            var keypair = await client.GenerateClientKeyPairAsync(kem);
            Content = new MarkupString(await client.GetQrCodeAsync(Convert.ToBase64String(keypair.PrivateKey)));
            JsonContent = Convert.ToBase64String(keypair.PrivateKey);
            StateHasChanged();
        }
    }
}